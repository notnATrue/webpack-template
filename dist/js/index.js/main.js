/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/index.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n\n//# sourceURL=webpack:///./node_modules/process/browser.js?");

/***/ }),

/***/ "./node_modules/setimmediate/setImmediate.js":
/*!***************************************************!*\
  !*** ./node_modules/setimmediate/setImmediate.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    \"use strict\";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== \"function\") {\n        callback = new Function(\"\" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: \"Wait until any invocations of this algorithm started before this one have completed.\"\n        // So if we're currently running a task, we'll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // \"too much recursion\" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can't be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage(\"\", \"*\");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = \"setImmediate$\" + Math.random() + \"$\";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === \"string\" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener(\"message\", onGlobalMessage, false);\n        } else {\n            global.attachEvent(\"onmessage\", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, \"*\");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n            var script = doc.createElement(\"script\");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don't get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === \"[object process]\") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && \"onreadystatechange\" in doc.createElement(\"script\")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === \"undefined\" ? typeof global === \"undefined\" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\"), __webpack_require__(/*! ./../process/browser.js */ \"./node_modules/process/browser.js\")))\n\n//# sourceURL=webpack:///./node_modules/setimmediate/setImmediate.js?");

/***/ }),

/***/ "./node_modules/timers-browserify/main.js":
/*!************************************************!*\
  !*** ./node_modules/timers-browserify/main.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {var scope = (typeof global !== \"undefined\" && global) ||\n            (typeof self !== \"undefined\" && self) ||\n            window;\nvar apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, scope, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, scope, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(scope, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(/*! setimmediate */ \"./node_modules/setimmediate/setImmediate.js\");\n// On some exotic environments, it's not clear which object `setimmediate` was\n// able to install onto.  Search each possibility in the same order as the\n// `setimmediate` library.\nexports.setImmediate = (typeof self !== \"undefined\" && self.setImmediate) ||\n                       (typeof global !== \"undefined\" && global.setImmediate) ||\n                       (this && this.setImmediate);\nexports.clearImmediate = (typeof self !== \"undefined\" && self.clearImmediate) ||\n                         (typeof global !== \"undefined\" && global.clearImmediate) ||\n                         (this && this.clearImmediate);\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ \"./node_modules/webpack/buildin/global.js\")))\n\n//# sourceURL=webpack:///./node_modules/timers-browserify/main.js?");

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n\n//# sourceURL=webpack:///(webpack)/buildin/global.js?");

/***/ }),

/***/ "./src/js/index.js":
/*!*************************!*\
  !*** ./src/js/index.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(process, setImmediate) {\n\nvar SETTINGS = {\n  rebound: {\n    tension: 1,\n    friction: 9\n  },\n  spinner: {\n    id: 'spinner',\n    radius: 200,\n    sides: 3,\n    depth: 5,\n    colors: {\n      background: 'url(https://static.tildacdn.com/tild6339-6139-4131-b533-306431373236/logoweb1.svg)',\n      base: \"black\",\n      child: '#2818B1',\n      stroke: \"#180773\"\n    },\n    alwaysForward: true,\n    restAt: 0.5,\n    renderBase: false\n  }\n};\n\n(function () {\n  var rebound = {};\n  var util = rebound.util = {};\n  var concat = Array.prototype.concat;\n  var slice = Array.prototype.slice; // Bind a function to a context object.\n\n  util.bind = function bind(func, context) {\n    var args = slice.call(arguments, 2);\n    return function () {\n      func.apply(context, concat.call(args, slice.call(arguments)));\n    };\n  }; // Add all the properties in the source to the target.\n\n\n  util.extend = function extend(target, source) {\n    for (var key in source) {\n      if (source.hasOwnProperty(key)) {\n        target[key] = source[key];\n      }\n    }\n  }; // SpringSystem\n  // ------------\n  // **SpringSystem** is a set of Springs that all run on the same physics\n  // timing loop. To get started with a Rebound animation you first\n  // create a new SpringSystem and then add springs to it.\n\n\n  var SpringSystem = rebound.SpringSystem = function SpringSystem(looper) {\n    this._springRegistry = {};\n    this._activeSprings = [];\n    this.listeners = [];\n    this._idleSpringIndices = [];\n    this.looper = looper || new AnimationLooper();\n    this.looper.springSystem = this;\n  };\n\n  util.extend(SpringSystem.prototype, {\n    _springRegistry: null,\n    _isIdle: true,\n    _lastTimeMillis: -1,\n    _activeSprings: null,\n    listeners: null,\n    _idleSpringIndices: null,\n    // A SpringSystem is iterated by a looper. The looper is responsible\n    // for executing each frame as the SpringSystem is resolved to idle.\n    // There are three types of Loopers described below AnimationLooper,\n    // SimulationLooper, and SteppingSimulationLooper. AnimationLooper is\n    // the default as it is the most useful for common UI animations.\n    setLooper: function setLooper(looper) {\n      this.looper = looper;\n      looper.springSystem = this;\n    },\n    // Add a new spring to this SpringSystem. This Spring will now be solved for\n    // during the physics iteration loop. By default the spring will use the\n    // default Origami spring config with 40 tension and 7 friction, but you can\n    // also provide your own values here.\n    createSpring: function createSpring(tension, friction) {\n      var springConfig;\n\n      if (tension === undefined || friction === undefined) {\n        springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG;\n      } else {\n        springConfig = SpringConfig.fromOrigamiTensionAndFriction(tension, friction);\n      }\n\n      return this.createSpringWithConfig(springConfig);\n    },\n    // Add a spring with a specified bounciness and speed. To replicate Origami\n    // compositions based on PopAnimation patches, use this factory method to\n    // create matching springs.\n    createSpringWithBouncinessAndSpeed: function createSpringWithBouncinessAndSpeed(bounciness, speed) {\n      var springConfig;\n\n      if (bounciness === undefined || speed === undefined) {\n        springConfig = SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG;\n      } else {\n        springConfig = SpringConfig.fromBouncinessAndSpeed(bounciness, speed);\n      }\n\n      return this.createSpringWithConfig(springConfig);\n    },\n    // Add a spring with the provided SpringConfig.\n    createSpringWithConfig: function createSpringWithConfig(springConfig) {\n      var spring = new Spring(this);\n      this.registerSpring(spring);\n      spring.setSpringConfig(springConfig);\n      return spring;\n    },\n    // You can check if a SpringSystem is idle or active by calling\n    // getIsIdle. If all of the Springs in the SpringSystem are at rest,\n    // i.e. the physics forces have reached equilibrium, then this\n    // method will return true.\n    getIsIdle: function getIsIdle() {\n      return this._isIdle;\n    },\n    // Retrieve a specific Spring from the SpringSystem by id. This\n    // can be useful for inspecting the state of a spring before\n    // or after an integration loop in the SpringSystem executes.\n    getSpringById: function getSpringById(id) {\n      return this._springRegistry[id];\n    },\n    // Get a listing of all the springs registered with this\n    // SpringSystem.\n    getAllSprings: function getAllSprings() {\n      var vals = [];\n\n      for (var id in this._springRegistry) {\n        if (this._springRegistry.hasOwnProperty(id)) {\n          vals.push(this._springRegistry[id]);\n        }\n      }\n\n      return vals;\n    },\n    // registerSpring is called automatically as soon as you create\n    // a Spring with SpringSystem#createSpring. This method sets the\n    // spring up in the registry so that it can be solved in the\n    // solver loop.\n    registerSpring: function registerSpring(spring) {\n      this._springRegistry[spring.getId()] = spring;\n    },\n    // Deregister a spring with this SpringSystem. The SpringSystem will\n    // no longer consider this Spring during its integration loop once\n    // this is called. This is normally done automatically for you when\n    // you call Spring#destroy.\n    deregisterSpring: function deregisterSpring(spring) {\n      removeFirst(this._activeSprings, spring);\n      delete this._springRegistry[spring.getId()];\n    },\n    advance: function advance(time, deltaTime) {\n      while (this._idleSpringIndices.length > 0) {\n        this._idleSpringIndices.pop();\n      }\n\n      for (var i = 0, len = this._activeSprings.length; i < len; i++) {\n        var spring = this._activeSprings[i];\n\n        if (spring.systemShouldAdvance()) {\n          spring.advance(time / 1000.0, deltaTime / 1000.0);\n        } else {\n          this._idleSpringIndices.push(this._activeSprings.indexOf(spring));\n        }\n      }\n\n      while (this._idleSpringIndices.length > 0) {\n        var idx = this._idleSpringIndices.pop();\n\n        idx >= 0 && this._activeSprings.splice(idx, 1);\n      }\n    },\n    // This is our main solver loop called to move the simulation\n    // forward through time. Before each pass in the solver loop\n    // onBeforeIntegrate is called on an any listeners that have\n    // registered themeselves with the SpringSystem. This gives you\n    // an opportunity to apply any constraints or adjustments to\n    // the springs that should be enforced before each iteration\n    // loop. Next the advance method is called to move each Spring in\n    // the systemShouldAdvance forward to the current time. After the\n    // integration step runs in advance, onAfterIntegrate is called\n    // on any listeners that have registered themselves with the\n    // SpringSystem. This gives you an opportunity to run any post\n    // integration constraints or adjustments on the Springs in the\n    // SpringSystem.\n    loop: function loop(currentTimeMillis) {\n      var listener;\n\n      if (this._lastTimeMillis === -1) {\n        this._lastTimeMillis = currentTimeMillis - 1;\n      }\n\n      var ellapsedMillis = currentTimeMillis - this._lastTimeMillis;\n      this._lastTimeMillis = currentTimeMillis;\n      var i = 0,\n          len = this.listeners.length;\n\n      for (i = 0; i < len; i++) {\n        listener = this.listeners[i];\n        listener.onBeforeIntegrate && listener.onBeforeIntegrate(this);\n      }\n\n      this.advance(currentTimeMillis, ellapsedMillis);\n\n      if (this._activeSprings.length === 0) {\n        this._isIdle = true;\n        this._lastTimeMillis = -1;\n      }\n\n      for (i = 0; i < len; i++) {\n        listener = this.listeners[i];\n        listener.onAfterIntegrate && listener.onAfterIntegrate(this);\n      }\n\n      if (!this._isIdle) {\n        this.looper.run();\n      }\n    },\n    // activateSpring is used to notify the SpringSystem that a Spring\n    // has become displaced. The system responds by starting its solver\n    // loop up if it is currently idle.\n    activateSpring: function activateSpring(springId) {\n      var spring = this._springRegistry[springId];\n\n      if (this._activeSprings.indexOf(spring) == -1) {\n        this._activeSprings.push(spring);\n      }\n\n      if (this.getIsIdle()) {\n        this._isIdle = false;\n        this.looper.run();\n      }\n    },\n    // Add a listener to the SpringSystem so that you can receive\n    // before/after integration notifications allowing Springs to be\n    // constrained or adjusted.\n    addListener: function addListener(listener) {\n      this.listeners.push(listener);\n    },\n    // Remove a previously added listener on the SpringSystem.\n    removeListener: function removeListener(listener) {\n      removeFirst(this.listeners, listener);\n    },\n    // Remove all previously added listeners on the SpringSystem.\n    removeAllListeners: function removeAllListeners() {\n      this.listeners = [];\n    }\n  }); // Spring\n  // ------\n  // **Spring** provides a model of a classical spring acting to\n  // resolve a body to equilibrium. Springs have configurable\n  // tension which is a force multipler on the displacement of the\n  // spring from its rest point or `endValue` as defined by [Hooke's\n  // law](http://en.wikipedia.org/wiki/Hooke's_law). Springs also have\n  // configurable friction, which ensures that they do not oscillate\n  // infinitely. When a Spring is displaced by updating it's resting\n  // or `currentValue`, the SpringSystems that contain that Spring\n  // will automatically start looping to solve for equilibrium. As each\n  // timestep passes, `SpringListener` objects attached to the Spring\n  // will be notified of the updates providing a way to drive an\n  // animation off of the spring's resolution curve.\n\n  var Spring = rebound.Spring = function Spring(springSystem) {\n    this._id = 's' + Spring._ID++;\n    this._springSystem = springSystem;\n    this.listeners = [];\n    this._currentState = new PhysicsState();\n    this._previousState = new PhysicsState();\n    this._tempState = new PhysicsState();\n  };\n\n  util.extend(Spring, {\n    _ID: 0,\n    MAX_DELTA_TIME_SEC: 0.064,\n    SOLVER_TIMESTEP_SEC: 0.001\n  });\n  util.extend(Spring.prototype, {\n    _id: 0,\n    _springConfig: null,\n    _overshootClampingEnabled: false,\n    _currentState: null,\n    _previousState: null,\n    _tempState: null,\n    _startValue: 0,\n    _endValue: 0,\n    _wasAtRest: true,\n    _restSpeedThreshold: 0.001,\n    _displacementFromRestThreshold: 0.001,\n    listeners: null,\n    _timeAccumulator: 0,\n    _springSystem: null,\n    // Remove a Spring from simulation and clear its listeners.\n    destroy: function destroy() {\n      this.listeners = [];\n      this.frames = [];\n\n      this._springSystem.deregisterSpring(this);\n    },\n    // Get the id of the spring, which can be used to retrieve it from\n    // the SpringSystems it participates in later.\n    getId: function getId() {\n      return this._id;\n    },\n    // Set the configuration values for this Spring. A SpringConfig\n    // contains the tension and friction values used to solve for the\n    // equilibrium of the Spring in the physics loop.\n    setSpringConfig: function setSpringConfig(springConfig) {\n      this._springConfig = springConfig;\n      return this;\n    },\n    // Retrieve the SpringConfig used by this Spring.\n    getSpringConfig: function getSpringConfig() {\n      return this._springConfig;\n    },\n    // Set the current position of this Spring. Listeners will be updated\n    // with this value immediately. If the rest or `endValue` is not\n    // updated to match this value, then the spring will be dispalced and\n    // the SpringSystem will start to loop to restore the spring to the\n    // `endValue`.\n    //\n    // A common pattern is to move a Spring around without animation by\n    // calling.\n    //\n    // ```\n    // spring.setCurrentValue(n).setAtRest();\n    // ```\n    //\n    // This moves the Spring to a new position `n`, sets the endValue\n    // to `n`, and removes any velocity from the `Spring`. By doing\n    // this you can allow the `SpringListener` to manage the position\n    // of UI elements attached to the spring even when moving without\n    // animation. For example, when dragging an element you can\n    // update the position of an attached view through a spring\n    // by calling `spring.setCurrentValue(x)`. When\n    // the gesture ends you can update the Springs\n    // velocity and endValue\n    // `spring.setVelocity(gestureEndVelocity).setEndValue(flingTarget)`\n    // to cause it to naturally animate the UI element to the resting\n    // position taking into account existing velocity. The codepaths for\n    // synchronous movement and spring driven animation can\n    // be unified using this technique.\n    setCurrentValue: function setCurrentValue(currentValue, skipSetAtRest) {\n      this._startValue = currentValue;\n      this._currentState.position = currentValue;\n\n      if (!skipSetAtRest) {\n        this.setAtRest();\n      }\n\n      this.notifyPositionUpdated(false, false);\n      return this;\n    },\n    // Get the position that the most recent animation started at. This\n    // can be useful for determining the number off oscillations that\n    // have occurred.\n    getStartValue: function getStartValue() {\n      return this._startValue;\n    },\n    // Retrieve the current value of the Spring.\n    getCurrentValue: function getCurrentValue() {\n      return this._currentState.position;\n    },\n    // Get the absolute distance of the Spring from it's resting endValue\n    // position.\n    getCurrentDisplacementDistance: function getCurrentDisplacementDistance() {\n      return this.getDisplacementDistanceForState(this._currentState);\n    },\n    getDisplacementDistanceForState: function getDisplacementDistanceForState(state) {\n      return Math.abs(this._endValue - state.position);\n    },\n    // Set the endValue or resting position of the spring. If this\n    // value is different than the current value, the SpringSystem will\n    // be notified and will begin running its solver loop to resolve\n    // the Spring to equilibrium. Any listeners that are registered\n    // for onSpringEndStateChange will also be notified of this update\n    // immediately.\n    setEndValue: function setEndValue(endValue) {\n      if (this._endValue == endValue && this.isAtRest()) {\n        return this;\n      }\n\n      this._startValue = this.getCurrentValue();\n      this._endValue = endValue;\n\n      this._springSystem.activateSpring(this.getId());\n\n      for (var i = 0, len = this.listeners.length; i < len; i++) {\n        var listener = this.listeners[i];\n        var onChange = listener.onSpringEndStateChange;\n        onChange && onChange(this);\n      }\n\n      return this;\n    },\n    // Retrieve the endValue or resting position of this spring.\n    getEndValue: function getEndValue() {\n      return this._endValue;\n    },\n    // Set the current velocity of the Spring. As previously mentioned,\n    // this can be useful when you are performing a direct manipulation\n    // gesture. When a UI element is released you may call setVelocity\n    // on its animation Spring so that the Spring continues with the\n    // same velocity as the gesture ended with. The friction, tension,\n    // and displacement of the Spring will then govern its motion to\n    // return to rest on a natural feeling curve.\n    setVelocity: function setVelocity(velocity) {\n      if (velocity === this._currentState.velocity) {\n        return this;\n      }\n\n      this._currentState.velocity = velocity;\n\n      this._springSystem.activateSpring(this.getId());\n\n      return this;\n    },\n    // Get the current velocity of the Spring.\n    getVelocity: function getVelocity() {\n      return this._currentState.velocity;\n    },\n    // Set a threshold value for the movement speed of the Spring below\n    // which it will be considered to be not moving or resting.\n    setRestSpeedThreshold: function setRestSpeedThreshold(restSpeedThreshold) {\n      this._restSpeedThreshold = restSpeedThreshold;\n      return this;\n    },\n    // Retrieve the rest speed threshold for this Spring.\n    getRestSpeedThreshold: function getRestSpeedThreshold() {\n      return this._restSpeedThreshold;\n    },\n    // Set a threshold value for displacement below which the Spring\n    // will be considered to be not displaced i.e. at its resting\n    // `endValue`.\n    setRestDisplacementThreshold: function setRestDisplacementThreshold(displacementFromRestThreshold) {\n      this._displacementFromRestThreshold = displacementFromRestThreshold;\n    },\n    // Retrieve the rest displacement threshold for this spring.\n    getRestDisplacementThreshold: function getRestDisplacementThreshold() {\n      return this._displacementFromRestThreshold;\n    },\n    // Enable overshoot clamping. This means that the Spring will stop\n    // immediately when it reaches its resting position regardless of\n    // any existing momentum it may have. This can be useful for certain\n    // types of animations that should not oscillate such as a scale\n    // down to 0 or alpha fade.\n    setOvershootClampingEnabled: function setOvershootClampingEnabled(enabled) {\n      this._overshootClampingEnabled = enabled;\n      return this;\n    },\n    // Check if overshoot clamping is enabled for this spring.\n    isOvershootClampingEnabled: function isOvershootClampingEnabled() {\n      return this._overshootClampingEnabled;\n    },\n    // Check if the Spring has gone past its end point by comparing\n    // the direction it was moving in when it started to the current\n    // position and end value.\n    isOvershooting: function isOvershooting() {\n      var start = this._startValue;\n      var end = this._endValue;\n      return this._springConfig.tension > 0 && (start < end && this.getCurrentValue() > end || start > end && this.getCurrentValue() < end);\n    },\n    // Spring.advance is the main solver method for the Spring. It takes\n    // the current time and delta since the last time step and performs\n    // an RK4 integration to get the new position and velocity state\n    // for the Spring based on the tension, friction, velocity, and\n    // displacement of the Spring.\n    advance: function advance(time, realDeltaTime) {\n      var isAtRest = this.isAtRest();\n\n      if (isAtRest && this._wasAtRest) {\n        return;\n      }\n\n      var adjustedDeltaTime = realDeltaTime;\n\n      if (realDeltaTime > Spring.MAX_DELTA_TIME_SEC) {\n        adjustedDeltaTime = Spring.MAX_DELTA_TIME_SEC;\n      }\n\n      this._timeAccumulator += adjustedDeltaTime;\n      var tension = this._springConfig.tension,\n          friction = this._springConfig.friction,\n          position = this._currentState.position,\n          velocity = this._currentState.velocity,\n          tempPosition = this._tempState.position,\n          tempVelocity = this._tempState.velocity,\n          aVelocity,\n          aAcceleration,\n          bVelocity,\n          bAcceleration,\n          cVelocity,\n          cAcceleration,\n          dVelocity,\n          dAcceleration,\n          dxdt,\n          dvdt;\n\n      while (this._timeAccumulator >= Spring.SOLVER_TIMESTEP_SEC) {\n        this._timeAccumulator -= Spring.SOLVER_TIMESTEP_SEC;\n\n        if (this._timeAccumulator < Spring.SOLVER_TIMESTEP_SEC) {\n          this._previousState.position = position;\n          this._previousState.velocity = velocity;\n        }\n\n        aVelocity = velocity;\n        aAcceleration = tension * (this._endValue - tempPosition) - friction * velocity;\n        tempPosition = position + aVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;\n        tempVelocity = velocity + aAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;\n        bVelocity = tempVelocity;\n        bAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;\n        tempPosition = position + bVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;\n        tempVelocity = velocity + bAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;\n        cVelocity = tempVelocity;\n        cAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;\n        tempPosition = position + cVelocity * Spring.SOLVER_TIMESTEP_SEC * 0.5;\n        tempVelocity = velocity + cAcceleration * Spring.SOLVER_TIMESTEP_SEC * 0.5;\n        dVelocity = tempVelocity;\n        dAcceleration = tension * (this._endValue - tempPosition) - friction * tempVelocity;\n        dxdt = 1.0 / 6.0 * (aVelocity + 2.0 * (bVelocity + cVelocity) + dVelocity);\n        dvdt = 1.0 / 6.0 * (aAcceleration + 2.0 * (bAcceleration + cAcceleration) + dAcceleration);\n        position += dxdt * Spring.SOLVER_TIMESTEP_SEC;\n        velocity += dvdt * Spring.SOLVER_TIMESTEP_SEC;\n      }\n\n      this._tempState.position = tempPosition;\n      this._tempState.velocity = tempVelocity;\n      this._currentState.position = position;\n      this._currentState.velocity = velocity;\n\n      if (this._timeAccumulator > 0) {\n        this._interpolate(this._timeAccumulator / Spring.SOLVER_TIMESTEP_SEC);\n      }\n\n      if (this.isAtRest() || this._overshootClampingEnabled && this.isOvershooting()) {\n        if (this._springConfig.tension > 0) {\n          this._startValue = this._endValue;\n          this._currentState.position = this._endValue;\n        } else {\n          this._endValue = this._currentState.position;\n          this._startValue = this._endValue;\n        }\n\n        this.setVelocity(0);\n        isAtRest = true;\n      }\n\n      var notifyActivate = false;\n\n      if (this._wasAtRest) {\n        this._wasAtRest = false;\n        notifyActivate = true;\n      }\n\n      var notifyAtRest = false;\n\n      if (isAtRest) {\n        this._wasAtRest = true;\n        notifyAtRest = true;\n      }\n\n      this.notifyPositionUpdated(notifyActivate, notifyAtRest);\n    },\n    notifyPositionUpdated: function notifyPositionUpdated(notifyActivate, notifyAtRest) {\n      for (var i = 0, len = this.listeners.length; i < len; i++) {\n        var listener = this.listeners[i];\n\n        if (notifyActivate && listener.onSpringActivate) {\n          listener.onSpringActivate(this);\n        }\n\n        if (listener.onSpringUpdate) {\n          listener.onSpringUpdate(this);\n        }\n\n        if (notifyAtRest && listener.onSpringAtRest) {\n          listener.onSpringAtRest(this);\n        }\n      }\n    },\n    // Check if the SpringSystem should advance. Springs are advanced\n    // a final frame after they reach equilibrium to ensure that the\n    // currentValue is exactly the requested endValue regardless of the\n    // displacement threshold.\n    systemShouldAdvance: function systemShouldAdvance() {\n      return !this.isAtRest() || !this.wasAtRest();\n    },\n    wasAtRest: function wasAtRest() {\n      return this._wasAtRest;\n    },\n    // Check if the Spring is atRest meaning that it's currentValue and\n    // endValue are the same and that it has no velocity. The previously\n    // described thresholds for speed and displacement define the bounds\n    // of this equivalence check. If the Spring has 0 tension, then it will\n    // be considered at rest whenever its absolute velocity drops below the\n    // restSpeedThreshold.\n    isAtRest: function isAtRest() {\n      return Math.abs(this._currentState.velocity) < this._restSpeedThreshold && (this.getDisplacementDistanceForState(this._currentState) <= this._displacementFromRestThreshold || this._springConfig.tension === 0);\n    },\n    // Force the spring to be at rest at its current position. As\n    // described in the documentation for setCurrentValue, this method\n    // makes it easy to do synchronous non-animated updates to ui\n    // elements that are attached to springs via SpringListeners.\n    setAtRest: function setAtRest() {\n      this._endValue = this._currentState.position;\n      this._tempState.position = this._currentState.position;\n      this._currentState.velocity = 0;\n      return this;\n    },\n    _interpolate: function _interpolate(alpha) {\n      this._currentState.position = this._currentState.position * alpha + this._previousState.position * (1 - alpha);\n      this._currentState.velocity = this._currentState.velocity * alpha + this._previousState.velocity * (1 - alpha);\n    },\n    getListeners: function getListeners() {\n      return this.listeners;\n    },\n    addListener: function addListener(newListener) {\n      this.listeners.push(newListener);\n      return this;\n    },\n    removeListener: function removeListener(listenerToRemove) {\n      removeFirst(this.listeners, listenerToRemove);\n      return this;\n    },\n    removeAllListeners: function removeAllListeners() {\n      this.listeners = [];\n      return this;\n    },\n    currentValueIsApproximately: function currentValueIsApproximately(value) {\n      return Math.abs(this.getCurrentValue() - value) <= this.getRestDisplacementThreshold();\n    }\n  }); // PhysicsState\n  // ------------\n  // **PhysicsState** consists of a position and velocity. A Spring uses\n  // this internally to keep track of its current and prior position and\n  // velocity values.\n\n  var PhysicsState = function PhysicsState() {};\n\n  util.extend(PhysicsState.prototype, {\n    position: 0,\n    velocity: 0\n  }); // SpringConfig\n  // ------------\n  // **SpringConfig** maintains a set of tension and friction constants\n  // for a Spring. You can use fromOrigamiTensionAndFriction to convert\n  // values from the [Origami](http://facebook.github.io/origami/)\n  // design tool directly to Rebound spring constants.\n\n  var SpringConfig = rebound.SpringConfig = function SpringConfig(tension, friction) {\n    this.tension = tension;\n    this.friction = friction;\n  }; // Loopers\n  // -------\n  // **AnimationLooper** plays each frame of the SpringSystem on animation\n  // timing loop. This is the default type of looper for a new spring system\n  // as it is the most common when developing UI.\n\n\n  var AnimationLooper = rebound.AnimationLooper = function AnimationLooper() {\n    this.springSystem = null;\n\n    var _this = this;\n\n    var _run = function _run() {\n      _this.springSystem.loop(Date.now());\n    };\n\n    this.run = function () {\n      util.onFrame(_run);\n    };\n  }; // **SimulationLooper** resolves the SpringSystem to a resting state in a\n  // tight and blocking loop. This is useful for synchronously generating\n  // pre-recorded animations that can then be played on a timing loop later.\n  // Sometimes this lead to better performance to pre-record a single spring\n  // curve and use it to drive many animations; however, it can make dynamic\n  // response to user input a bit trickier to implement.\n\n\n  rebound.SimulationLooper = function SimulationLooper(timestep) {\n    this.springSystem = null;\n    var time = 0;\n    var running = false;\n    timestep = timestep || 16.667;\n\n    this.run = function () {\n      if (running) {\n        return;\n      }\n\n      running = true;\n\n      while (!this.springSystem.getIsIdle()) {\n        this.springSystem.loop(time += timestep);\n      }\n\n      running = false;\n    };\n  }; // **SteppingSimulationLooper** resolves the SpringSystem one step at a\n  // time controlled by an outside loop. This is useful for testing and\n  // verifying the behavior of a SpringSystem or if you want to control your own\n  // timing loop for some reason e.g. slowing down or speeding up the\n  // simulation.\n\n\n  rebound.SteppingSimulationLooper = function (timestep) {\n    this.springSystem = null;\n    var time = 0; // this.run is NOOP'd here to allow control from the outside using\n    // this.step.\n\n    this.run = function () {}; // Perform one step toward resolving the SpringSystem.\n\n\n    this.step = function (timestep) {\n      this.springSystem.loop(time += timestep);\n    };\n  }; // Math for converting from\n  // [Origami](http://facebook.github.io/origami/) to\n  // [Rebound](http://facebook.github.io/rebound).\n  // You mostly don't need to worry about this, just use\n  // SpringConfig.fromOrigamiTensionAndFriction(v, v);\n\n\n  var OrigamiValueConverter = rebound.OrigamiValueConverter = {\n    tensionFromOrigamiValue: function tensionFromOrigamiValue(oValue) {\n      return (oValue - 30.0) * 3.62 + 194.0;\n    },\n    origamiValueFromTension: function origamiValueFromTension(tension) {\n      return (tension - 194.0) / 3.62 + 30.0;\n    },\n    frictionFromOrigamiValue: function frictionFromOrigamiValue(oValue) {\n      return (oValue - 8.0) * 3.0 + 25.0;\n    },\n    origamiFromFriction: function origamiFromFriction(friction) {\n      return (friction - 25.0) / 3.0 + 8.0;\n    }\n  }; // BouncyConversion provides math for converting from Origami PopAnimation\n  // config values to regular Origami tension and friction values. If you are\n  // trying to replicate prototypes made with PopAnimation patches in Origami,\n  // then you should create your springs with\n  // SpringSystem.createSpringWithBouncinessAndSpeed, which uses this Math\n  // internally to create a spring to match the provided PopAnimation\n  // configuration from Origami.\n\n  var BouncyConversion = rebound.BouncyConversion = function (bounciness, speed) {\n    this.bounciness = bounciness;\n    this.speed = speed;\n    var b = this.normalize(bounciness / 1.7, 0, 20.0);\n    b = this.projectNormal(b, 0.0, 0.8);\n    var s = this.normalize(speed / 1.7, 0, 20.0);\n    this.bouncyTension = this.projectNormal(s, 0.5, 200);\n    this.bouncyFriction = this.quadraticOutInterpolation(b, this.b3Nobounce(this.bouncyTension), 0.01);\n  };\n\n  util.extend(BouncyConversion.prototype, {\n    normalize: function normalize(value, startValue, endValue) {\n      return (value - startValue) / (endValue - startValue);\n    },\n    projectNormal: function projectNormal(n, start, end) {\n      return start + n * (end - start);\n    },\n    linearInterpolation: function linearInterpolation(t, start, end) {\n      return t * end + (1.0 - t) * start;\n    },\n    quadraticOutInterpolation: function quadraticOutInterpolation(t, start, end) {\n      return this.linearInterpolation(2 * t - t * t, start, end);\n    },\n    b3Friction1: function b3Friction1(x) {\n      return 0.0007 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;\n    },\n    b3Friction2: function b3Friction2(x) {\n      return 0.000044 * Math.pow(x, 3) - 0.006 * Math.pow(x, 2) + 0.36 * x + 2.;\n    },\n    b3Friction3: function b3Friction3(x) {\n      return 0.00000045 * Math.pow(x, 3) - 0.000332 * Math.pow(x, 2) + 0.1078 * x + 5.84;\n    },\n    b3Nobounce: function b3Nobounce(tension) {\n      var friction = 0;\n\n      if (tension <= 18) {\n        friction = this.b3Friction1(tension);\n      } else if (tension > 18 && tension <= 44) {\n        friction = this.b3Friction2(tension);\n      } else {\n        friction = this.b3Friction3(tension);\n      }\n\n      return friction;\n    }\n  });\n  util.extend(SpringConfig, {\n    // Convert an origami Spring tension and friction to Rebound spring\n    // constants. If you are prototyping a design with Origami, this\n    // makes it easy to make your springs behave exactly the same in\n    // Rebound.\n    fromOrigamiTensionAndFriction: function fromOrigamiTensionAndFriction(tension, friction) {\n      return new SpringConfig(OrigamiValueConverter.tensionFromOrigamiValue(tension), OrigamiValueConverter.frictionFromOrigamiValue(friction));\n    },\n    // Convert an origami PopAnimation Spring bounciness and speed to Rebound\n    // spring constants. If you are using PopAnimation patches in Origami, this\n    // utility will provide springs that match your prototype.\n    fromBouncinessAndSpeed: function fromBouncinessAndSpeed(bounciness, speed) {\n      var bouncyConversion = new rebound.BouncyConversion(bounciness, speed);\n      return this.fromOrigamiTensionAndFriction(bouncyConversion.bouncyTension, bouncyConversion.bouncyFriction);\n    },\n    // Create a SpringConfig with no tension or a coasting spring with some\n    // amount of Friction so that it does not coast infininitely.\n    coastingConfigWithOrigamiFriction: function coastingConfigWithOrigamiFriction(friction) {\n      return new SpringConfig(0, OrigamiValueConverter.frictionFromOrigamiValue(friction));\n    }\n  });\n  SpringConfig.DEFAULT_ORIGAMI_SPRING_CONFIG = SpringConfig.fromOrigamiTensionAndFriction(40, 7);\n  util.extend(SpringConfig.prototype, {\n    friction: 0,\n    tension: 0\n  }); // Here are a couple of function to convert colors between hex codes and RGB\n  // component values. These are handy when performing color\n  // tweening animations.\n\n  var colorCache = {};\n\n  util.hexToRGB = function (color) {\n    if (colorCache[color]) {\n      return colorCache[color];\n    }\n\n    color = color.replace('#', '');\n\n    if (color.length === 3) {\n      color = color[0] + color[0] + color[1] + color[1] + color[2] + color[2];\n    }\n\n    var parts = color.match(/.{2}/g);\n    var ret = {\n      r: parseInt(parts[0], 16),\n      g: parseInt(parts[1], 16),\n      b: parseInt(parts[2], 16)\n    };\n    colorCache[color] = ret;\n    return ret;\n  };\n\n  util.rgbToHex = function (r, g, b) {\n    r = r.toString(16);\n    g = g.toString(16);\n    b = b.toString(16);\n    r = r.length < 2 ? '0' + r : r;\n    g = g.length < 2 ? '0' + g : g;\n    b = b.length < 2 ? '0' + b : b;\n    return '#' + r + g + b;\n  };\n\n  var MathUtil = rebound.MathUtil = {\n    // This helper function does a linear interpolation of a value from\n    // one range to another. This can be very useful for converting the\n    // motion of a Spring to a range of UI property values. For example a\n    // spring moving from position 0 to 1 could be interpolated to move a\n    // view from pixel 300 to 350 and scale it from 0.5 to 1. The current\n    // position of the `Spring` just needs to be run through this method\n    // taking its input range in the _from_ parameters with the property\n    // animation range in the _to_ parameters.\n    mapValueInRange: function mapValueInRange(value, fromLow, fromHigh, toLow, toHigh) {\n      var fromRangeSize = fromHigh - fromLow;\n      var toRangeSize = toHigh - toLow;\n      var valueScale = (value - fromLow) / fromRangeSize;\n      return toLow + valueScale * toRangeSize;\n    },\n    // Interpolate two hex colors in a 0 - 1 range or optionally provide a\n    // custom range with fromLow,fromHight. The output will be in hex by default\n    // unless asRGB is true in which case it will be returned as an rgb string.\n    interpolateColor: function interpolateColor(val, startColor, endColor, fromLow, fromHigh, asRGB) {\n      fromLow = fromLow === undefined ? 0 : fromLow;\n      fromHigh = fromHigh === undefined ? 1 : fromHigh;\n      startColor = util.hexToRGB(startColor);\n      endColor = util.hexToRGB(endColor);\n      var r = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.r, endColor.r));\n      var g = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.g, endColor.g));\n      var b = Math.floor(util.mapValueInRange(val, fromLow, fromHigh, startColor.b, endColor.b));\n\n      if (asRGB) {\n        return 'rgb(' + r + ',' + g + ',' + b + ')';\n      } else {\n        return util.rgbToHex(r, g, b);\n      }\n    },\n    degreesToRadians: function degreesToRadians(deg) {\n      return deg * Math.PI / 180;\n    },\n    radiansToDegrees: function radiansToDegrees(rad) {\n      return rad * 180 / Math.PI;\n    }\n  };\n  util.extend(util, MathUtil); // Utilities\n  // ---------\n  // Here are a few useful JavaScript utilities.\n  // Lop off the first occurence of the reference in the Array.\n\n  function removeFirst(array, item) {\n    var idx = array.indexOf(item);\n    idx != -1 && array.splice(idx, 1);\n  }\n\n  var _onFrame;\n\n  if (typeof window !== 'undefined') {\n    _onFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame || function (callback) {\n      window.setTimeout(callback, 1000 / 60);\n    };\n  }\n\n  if (!_onFrame && typeof process !== 'undefined' && process.title === 'node') {\n    _onFrame = setImmediate;\n  } // Cross browser/node timer functions.\n\n\n  util.onFrame = function onFrame(func) {\n    return _onFrame(func);\n  }; // Export the public api using exports for common js or the window for\n  // normal browser inclusion.\n\n\n  if (true) {\n    util.extend(exports, rebound);\n  } else {}\n})(); // Legal Stuff\n// -----------\n\n/**\n *  Copyright (c) 2013, Facebook, Inc.\n *  All rights reserved.\n *\n *  This source code is licensed under the BSD-style license found in the\n *  LICENSE file in the root directory of this source tree. An additional grant\n *  of patent rights can be found in the PATENTS file in the same directory.\n */\n\n\n'use strict';\n/**\n * Polygon.\n * Create a regular polygon and provide api to compute inscribed child.\n */\n\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Polygon = function () {\n  function Polygon() {\n    var radius = arguments.length <= 0 || arguments[0] === undefined ? 100 : arguments[0];\n    var sides = arguments.length <= 1 || arguments[1] === undefined ? 3 : arguments[1];\n    var depth = arguments.length <= 2 || arguments[2] === undefined ? 0 : arguments[2];\n    var colors = arguments[3];\n\n    _classCallCheck(this, Polygon);\n\n    this._radius = radius;\n    this._sides = sides;\n    this._depth = depth;\n    this._colors = colors;\n    this._x = 0;\n    this._y = 0;\n    this.rotation = 0;\n    this.scale = 1; // Get basePolygon points straight away.\n\n    this.points = this._getRegularPolygonPoints();\n  }\n  /**\n   * Get the points of any regular polygon based on\n   * the number of sides and radius.\n   */\n\n\n  _createClass(Polygon, [{\n    key: '_getRegularPolygonPoints',\n    value: function _getRegularPolygonPoints() {\n      var points = [];\n      var i = 0;\n\n      while (i < this._sides) {\n        // Note that sin and cos are inverted in order to draw\n        // polygon pointing down like: в€‡\n        var x = -this._radius * Math.sin(i * 2 * Math.PI / this._sides);\n        var y = this._radius * Math.cos(i * 2 * Math.PI / this._sides);\n        points.push({\n          x: x,\n          y: y\n        });\n        i++;\n      }\n\n      return points;\n    }\n    /**\n     * Get the inscribed polygon points by calling `getInterpolatedPoint`\n     * for the points (start, end) of each side.\n     */\n\n  }, {\n    key: '_getInscribedPoints',\n    value: function _getInscribedPoints(points, progress) {\n      var _this = this;\n\n      var inscribedPoints = [];\n      points.forEach(function (item, i) {\n        var start = item;\n        var end = points[i + 1];\n\n        if (!end) {\n          end = points[0];\n        }\n\n        var point = _this._getInterpolatedPoint(start, end, progress);\n\n        inscribedPoints.push(point);\n      });\n      return inscribedPoints;\n    }\n    /**\n     * Get interpolated point using linear interpolation\n     * on x and y axis.\n     */\n\n  }, {\n    key: '_getInterpolatedPoint',\n    value: function _getInterpolatedPoint(start, end, progress) {\n      var Ax = start.x;\n      var Ay = start.y;\n      var Bx = end.x;\n      var By = end.y; // Linear interpolation formula:\n      // point = start + (end - start) * progress;\n\n      var Cx = Ax + (Bx - Ax) * progress;\n      var Cy = Ay + (By - Ay) * progress;\n      return {\n        x: Cx,\n        y: Cy\n      };\n    }\n    /**\n     * Update children points array.\n     */\n\n  }, {\n    key: '_getUpdatedChildren',\n    value: function _getUpdatedChildren(progress) {\n      var children = [];\n\n      for (var i = 0; i < this._depth; i++) {\n        // Get basePolygon points on first lap\n        // then get previous child points.\n        var points = children[i - 1] || this.points;\n\n        var inscribedPoints = this._getInscribedPoints(points, progress);\n\n        children.push(inscribedPoints);\n      }\n\n      return children;\n    }\n    /**\n     * Render children, first update children array,\n     * then loop and draw each child.\n     */\n\n  }, {\n    key: 'renderChildren',\n    value: function renderChildren(context, progress) {\n      var _this2 = this;\n\n      var children = this._getUpdatedChildren(progress); // child = array of points at a certain progress over the parent sides.\n\n\n      children.forEach(function (points, i) {\n        // Draw child.\n        context.beginPath();\n        points.forEach(function (point) {\n          return context.lineTo(point.x, point.y);\n        });\n        context.closePath(); // Set colors.\n\n        var strokeColor = _this2._colors.stroke;\n        var childColor = _this2._colors.child;\n\n        if (strokeColor) {\n          context.strokeStyle = strokeColor;\n          context.stroke();\n        }\n\n        if (childColor) {\n          var rgb = rebound.util.hexToRGB(childColor);\n          var alphaUnit = 1 / children.length;\n          var alpha = alphaUnit + alphaUnit * i;\n          var rgba = 'rgba(' + rgb.r + ', ' + rgb.g + ', ' + rgb.b + ', ' + alpha + ')';\n          context.fillStyle = rgba; // Set Shadow.\n\n          context.shadowColor = 'rgba(0,0,0, 0.1)';\n          context.shadowBlur = 10;\n          context.shadowOffsetX = 0;\n          context.shadowOffsetY = 0;\n          context.fill();\n        }\n      });\n    }\n    /**\n     * Render.\n     */\n\n  }, {\n    key: 'render',\n    value: function render(context) {\n      context.save();\n      context.translate(this._x, this._y);\n\n      if (this.rotation !== 0) {\n        context.rotate(rebound.MathUtil.degreesToRadians(this.rotation));\n      }\n\n      if (this.scale !== 1) {\n        context.scale(this.scale, this.scale);\n      } // Draw basePolygon.\n\n\n      context.beginPath();\n      this.points.forEach(function (point) {\n        return context.lineTo(point.x, point.y);\n      });\n      context.closePath(); // Set colors.\n\n      var strokeColor = this._colors.stroke;\n      var childColor = this._colors.base;\n\n      if (strokeColor) {\n        context.strokeStyle = strokeColor;\n        context.stroke();\n      }\n\n      if (childColor) {\n        context.fillStyle = childColor;\n        context.fill();\n      }\n\n      context.restore();\n    }\n  }]);\n\n  return Polygon;\n}();\n\n'use strict';\n/**\n * Spinner.\n * Create a canvas element, append it to the body, render polygon with\n * inscribed children, provide init and complete methods to control spinner.\n */\n\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar Spinner = function () {\n  function Spinner(params) {\n    _classCallCheck(this, Spinner);\n\n    var id = params.id,\n        radius = params.radius,\n        sides = params.sides,\n        depth = params.depth,\n        colors = params.colors,\n        alwaysForward = params.alwaysForward,\n        restAt = params.restAt,\n        renderBase = params.renderBase;\n\n    if (sides < 3) {\n      console.warn('At least 3 sides required.');\n      sides = 3;\n    }\n\n    this._canvas = document.createElement('canvas');\n    this._canvas.style.backgroundColor = colors.background; // this._canvas.style.backgroundImage = \"url(https://static.tildacdn.com/tild6339-6139-4131-b533-306431373236/logoweb1.svg)\"\n\n    this._canvasW = null;\n    this._canvasH = null;\n    this._canvasOpacity = 1;\n    this._centerX = null;\n    this._centerY = null;\n    this._alwaysForward = alwaysForward;\n    this._restThreshold = restAt;\n    this._renderBase = renderBase;\n    this._springRangeLow = 0;\n    this._springRangeHigh = this._restThreshold || 1; // Instantiate basePolygon.\n\n    this._basePolygon = new Polygon(radius, sides, depth, colors);\n    this._progress = 0;\n    this._isAutoSpin = null;\n    this._isCompleting = null;\n  }\n  /**\n   * Init spinner.\n   */\n\n\n  _createClass(Spinner, [{\n    key: 'init',\n    value: function init(spring, autoSpin) {\n      this._addCanvas();\n\n      this._spring = spring;\n\n      this._addSpringListener();\n\n      this._isAutoSpin = autoSpin;\n\n      if (autoSpin) {\n        // Start auto spin.\n        this._spin();\n      } else {\n        // Render first frame only.\n        this._spring.setEndValue(0);\n\n        this.render();\n      }\n    }\n  }, {\n    key: '_addCanvas',\n    value: function _addCanvas() {\n      document.body.appendChild(this._canvas);\n      this._context = this._canvas.getContext('2d');\n\n      this._setCanvasSize();\n    }\n  }, {\n    key: '_setCanvasSize',\n    value: function _setCanvasSize() {\n      this._canvasW = this._canvas.width = '400';\n      this._canvasH = this._canvas.height = '400';\n      this._canvas.style.position = 'relative';\n      this._canvas.style.rotate = \"60deg !important\"; // this._canvas.style.width = '1000px';\n\n      this._canvas.style.top = 0;\n      this._canvas.style.left = 0;\n      this._centerX = this._canvasW / 2;\n      this._centerY = this._canvasH / 2;\n    }\n  }, {\n    key: '_addSpringListener',\n    value: function _addSpringListener() {\n      var ctx = this; // Add a listener to the spring. Every time the physics\n      // solver updates the Spring's value onSpringUpdate will\n      // be called.\n\n      this._spring.addListener({\n        onSpringUpdate: function onSpringUpdate(spring) {\n          var val = spring.getCurrentValue(); // Input range in the `from` parameters.\n\n          var fromLow = 0,\n              fromHigh = 1,\n              // Property animation range in the `to` parameters.\n          toLow = ctx._springRangeLow,\n              toHigh = ctx._springRangeHigh;\n          val = rebound.MathUtil.mapValueInRange(val, fromLow, fromHigh, toLow, toHigh); // Note that the render method is\n          // called with the spring motion value.\n\n          ctx.render(val);\n        }\n      });\n    }\n    /**\n     * Start complete animation.\n     */\n\n  }, {\n    key: 'setComplete',\n    value: function setComplete() {\n      this._isCompleting = true;\n    }\n  }, {\n    key: '_completeAnimation',\n    value: function _completeAnimation() {\n      // Fade out the canvas.\n      this._canvasOpacity -= 0.1;\n      this._canvas.style.opacity = this._canvasOpacity; // Stop animation and remove canvas.\n\n      if (this._canvasOpacity <= 0) {\n        this._isAutoSpin = false;\n\n        this._spring.setAtRest();\n\n        this._canvas.remove();\n      }\n    }\n    /**\n     * Spin animation.\n     */\n\n  }, {\n    key: '_spin',\n    value: function _spin() {\n      if (this._alwaysForward) {\n        var currentValue = this._spring.getCurrentValue(); // Switch the animation range used to compute the value\n        // in the `onSpringUpdate`, so to change the reverse animation\n        // of the spring at a certain threshold.\n\n\n        if (this._restThreshold && currentValue === 1) {\n          this._switchSpringRange();\n        } // In order to keep the motion going forward\n        // when spring reach 1 reset to 0 at rest.\n\n\n        if (currentValue === 1) {\n          this._spring.setCurrentValue(0).setAtRest();\n        }\n      } // Restart the spinner.\n\n\n      this._spring.setEndValue(this._spring.getCurrentValue() === 1 ? 0 : 1);\n    }\n  }, {\n    key: '_switchSpringRange',\n    value: function _switchSpringRange() {\n      var threshold = this._restThreshold;\n      this._springRangeLow = this._springRangeLow === threshold ? 0 : threshold;\n      this._springRangeHigh = this._springRangeHigh === threshold ? 1 : threshold;\n    }\n    /**\n     * Render.\n     */\n\n  }, {\n    key: 'render',\n    value: function render(progress) {\n      // Update progess if present and round to 4th decimal.\n      if (progress) {\n        this._progress = Math.round(progress * 10000) / 10000;\n      } // Restart the spin.\n\n\n      if (this._isAutoSpin && this._spring.isAtRest()) {\n        this._spin();\n      } // Complete the animation.\n\n\n      if (this._isCompleting) {\n        this._completeAnimation();\n      } // Clear canvas and save context.\n\n\n      this._context.clearRect(0, 0, this._canvasW, this._canvasH);\n\n      this._context.save(); // Move to center.\n\n\n      this._context.translate(this._centerX, this._centerY);\n\n      this._context.lineWidth = 1.5; // Render basePolygon.\n\n      if (this._renderBase) {\n        this._basePolygon.render(this._context);\n      } // Render inscribed polygons.\n\n\n      this._basePolygon.renderChildren(this._context, this._progress);\n\n      this._context.restore();\n    }\n  }]);\n\n  return Spinner;\n}();\n\n'use strict'; // Custom SETTINGS for each demo in related index.html\n\n\nvar settings = SETTINGS || {\n  rebound: {\n    tension: 2,\n    friction: 5\n  },\n  spinner: {\n    radius: 80,\n    sides: 3,\n    depth: 4,\n    colors: {\n      background: '#000000',\n      stroke: '#000000',\n      base: '#222222',\n      child: '#FFFFFF'\n    },\n    alwaysForward: true,\n    // When false the spring will reverse normally.\n    restAt: 0.5,\n    // A number from 0.1 to 0.9 || null for full rotation\n    renderBase: true // Optionally render basePolygon\n\n  }\n};\n/**\n * Demo.\n */\n\nvar demo = {\n  settings: settings,\n  spring: null,\n  spinner: null,\n\n  /**\n   * Initialize Rebound.js with settings.\n   * Rebound is used to generate a spring which\n   * is then used to animate the spinner.\n   * See more: http://facebook.github.io/rebound-js/docs/rebound.html\n   */\n  initRebound: function initRebound() {\n    var settings = demo.settings.rebound; // Create a SpringSystem.\n\n    var springSystem = new rebound.SpringSystem(); // Add a spring to the system.\n\n    demo.spring = springSystem.createSpring(settings.tension, settings.friction);\n  },\n\n  /**\n   * Initialize Spinner with settings.\n   */\n  initSpinner: function initSpinner() {\n    var settings = demo.settings.spinner; // Instantiate Spinner.\n\n    demo.spinner = new Spinner(settings);\n  },\n\n  /**\n   * Initialize demo.\n   */\n  init: function init() {\n    var spinnerTypeAutoSpin = true; // Instantiate animation engine and spinner system.\n\n    demo.initRebound();\n    demo.initSpinner(); // Init animation with Rebound Spring System.\n\n    demo.spinner.init(demo.spring, spinnerTypeAutoSpin);\n\n    if (spinnerTypeAutoSpin) {\n      // Fake loading time, in a real world just call demo.spinner.setComplete();\n      // whenever the preload will be completed.\n      setTimeout(function () {\n        demo.spinner.setComplete();\n      }, 100000);\n    } else {\n      // Perform real ajax request.\n      demo.loadSomething();\n    }\n  }\n  /**\n   * Ajax Request.\n   */\n  // loadSomething: function loadSomething() {\n  //   var oReq = new XMLHttpRequest();\n  //   oReq.addEventListener('progress', function (oEvent) {\n  //     if (oEvent.lengthComputable) {\n  //       var percent = Math.ceil(oEvent.loaded / oEvent.total * 100);\n  //       console.log('ajax loding percent', percent);\n  // By setting the end value with the actual loading percentage\n  // the spinner will progress based on the actual ajax loading time.\n  //   demo.spring.setEndValue(percent * 0.01);\n  // }\n  // });\n  //   oReq.addEventListener('load', function (e) {\n  //     // Complete the loading animation.\n  //     demo.spinner.setComplete();\n  //   });\n  //   oReq.open('GET', '/img/something.jpg');\n  //   oReq.send();\n  // }\n\n};\nvar button = document.querySelector('.button--trigger');\nbutton.addEventListener('click', function () {\n  demo.init();\n});\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/process/browser.js */ \"./node_modules/process/browser.js\"), __webpack_require__(/*! ./../../node_modules/timers-browserify/main.js */ \"./node_modules/timers-browserify/main.js\").setImmediate))\n\n//# sourceURL=webpack:///./src/js/index.js?");

/***/ })

/******/ });